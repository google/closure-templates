// Contains metadata needed to check errors when using idom.
// - Produced by the SoyHeader compiler.
// - Read by the SoyChecks tricorder to report errors.
syntax = "proto3";

package soy.compiler;

option java_package = "com.google.template.soy.idom";
option java_outer_classname = "IdomMetadataProto";
option java_multiple_files = true;

// IdomCompilationUnitMetadataP represents the information from a single
// compilation unit.
message IdomCompilationUnitMetadataP {
  // Deduplicated filepaths from all Location entries.
  // The Location entries of the IdomMetadata instances only contain the index
  // in this list.
  repeated string location_file_paths = 1;
  repeated IdomMetadataP templates = 2;
}

// Metadata about idom usage.
message IdomMetadataP {
  enum Kind {
    UNKNOWN_KIND = 0;

    // A {template}, {deltemplate} or {element}.
    //
    // Headers only contain templates of that compilation unit. Templates of
    // header deps are inlined into the usage places (e.g. a CALL).
    TEMPLATE = 1;

    // A {skip} command.
    //
    // Children of this node are also children in the html tree.
    SKIP = 2;

    // A root html element or call of a {for} loop without a {key}. E.g.
    // {for $x in [1]}
    //   <button></button>
    //   {render()}
    // {/for}
    //
    // Children of this node are also children in the html tree.
    FOR_LOOP_ROOT_WITHOUT_KEY = 3;

    // A focusable html element. E.g. <button>, or <div tabindex="0">.
    FOCUSABLE_ELEMENT = 4;

    // A wiz model or controller.
    WIZOBJECT = 5;
  }

  enum IdomKind {
    UNKNOWN_IDOM_KIND = 0;
    // A jscontroller or model that can be used with an without idom.
    // E.g. a jscontroller that doesn't modify the DOM.
    COMPATIBLE = 1;
    // A jscontroller or jsmodel that requires idom. E.g. a jscontroller that
    // injects a soy element.
    REQUIRE = 2;
    // A jscontroller that can't work with idom. E.g. a jscontroller that
    // directly modifies the DOM.
    REJECT = 3;
  }

  message Location {
    // Index in IdomCompilationUnitMetadataP.location_file_path.
    // Used for storing locations in a compact format on disk.
    optional int32 file_path_compilation_unit_index = 1;
    optional int32 line = 2;
    optional int32 column = 3;
  }

  optional Kind kind = 1;

  optional string name = 2;

  optional Location location = 3;

  repeated IdomMetadataP children = 4;

  optional IdomKind idom_kind = 5;
}
