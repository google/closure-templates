/*
 * Copyright 2015 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview
 * Value converters for protocol buffers in Soy that are semantically
 * similar to Soy builtin types.
 *
 * <p>Calls to these are generated by
 * com.google.template.soy.types.proto.SoyProtoTypeImpl.
 *
 */

goog.module('soy.converters');

const ReadonlySafeHtmlProto = goog.requireType('proto.html.ReadonlySafeHtmlProto');
const ReadonlySafeScriptProto = goog.requireType('proto.html.ReadonlySafeScriptProto');
const ReadonlySafeStyleProto = goog.requireType('proto.html.ReadonlySafeStyleProto');
const ReadonlySafeStyleSheetProto = goog.requireType('proto.html.ReadonlySafeStyleSheetProto');
const ReadonlySafeUrlProto = goog.requireType('proto.html.ReadonlySafeUrlProto');
const ReadonlyTrustedResourceUrlProto = goog.requireType('proto.html.ReadonlyTrustedResourceUrlProto');
const SafeHtmlProto = goog.require('proto.webutil.html.types.SafeHtmlProto');
const SafeScriptProto = goog.require('proto.webutil.html.types.SafeScriptProto');
const SafeStyleProto = goog.require('proto.webutil.html.types.SafeStyleProto');
const SafeStyleSheetProto = goog.require('proto.webutil.html.types.SafeStyleSheetProto');
const SafeUrlProto = goog.require('proto.webutil.html.types.SafeUrlProto');
const TrustedResourceUrlProto = goog.require('proto.webutil.html.types.TrustedResourceUrlProto');
const Uri = goog.require('goog.Uri');
const googDebug = goog.require('goog.debug');
const googString = goog.require('goog.string');
const soy = goog.require('soy');
const {ByteString} = goog.require('jspb.bytestring');
const {SanitizedCss, SanitizedHtml, SanitizedJs, SanitizedTrustedResourceUri, SanitizedUri} = goog.require('goog.soy.data');
const {htmlSafeByReview, resourceUrlSafeByReview, scriptSafeByReview, styleSafeByReview, styleSheetSafeByReview, urlSafeByReview} = goog.require('safevalues.restricted.reviewed');
const {htmlToProto, protoToHtml, protoToResourceUrl, protoToScript, protoToStyle, protoToStyleSheet, protoToUrl, resourceUrlToProto, scriptToProto, styleSheetToProto, styleToProto, urlToProto} = goog.require('safevalues.conversions.jspb');
const {unwrapHtml, unwrapResourceUrl, unwrapScript, unwrapStyle, unwrapStyleSheet, unwrapUrl} = goog.require('safevalues');

/**
 * Converts a CSS Sanitized Content object to a corresponding Safe Style Proto.
 * @param {!SanitizedCss|string} sanitizedCss
 * @return {!SafeStyleProto}
 */
exports.packSanitizedCssToSafeStyleProtoSoyRuntimeOnly = function(
    sanitizedCss) {
  if (sanitizedCss !== '' && !(sanitizedCss instanceof SanitizedCss)) {
    throw new Error(
        'expected SanitizedCss, got ' + googDebug.runtimeType(sanitizedCss));
  }

  // Sanity check: Try to prevent accidental misuse when this is a full
  // stylesheet rather than a declaration list. The error may trigger
  // incorrectly if the content contains curly brackets inside comments or
  // quoted strings.
  //
  // This is a best-effort attempt to preserve SafeStyle's semantic guarantees.
  if (sanitizedCss &&
      googString.contains(
          /** @type {!SanitizedCss} */ (sanitizedCss).getContent(), '{')) {
    throw new Error('Consider using packSanitizedCssToSafeStyleSheetProto().');
  }

  const safeStyle = styleSafeByReview(
      sanitizedCss ?
          /** @type {!SanitizedCss} */ (sanitizedCss).getContent() :
          '',
      {justification: 'from Soy SanitizedCss object'});
  return styleToProto(safeStyle);
};


/**
 * Converts a CSS Sanitized Content object to a corresponding Safe Style Sheet
 * Proto.
 * @param {!SanitizedCss|string} sanitizedCss
 * @return {!SafeStyleSheetProto}
 */
exports.packSanitizedCssToSafeStyleSheetProtoSoyRuntimeOnly = function(
    sanitizedCss) {
  if (sanitizedCss !== '' && !(sanitizedCss instanceof SanitizedCss)) {
    throw new Error(
        'expected SanitizedCss, got ' + googDebug.runtimeType(sanitizedCss));
  }

  // Sanity check: Try to prevent accidental misuse when this is a declaration
  // list rather than a full stylesheet. The error may trigger incorrectly if
  // the content contains curly brackets inside comments or quoted strings.
  //
  // This is a best-effort attempt to preserve SafeStyleSheet's semantic
  // guarantees.
  if (sanitizedCss &&
      /** @type {!SanitizedCss} */ (sanitizedCss).getContent().length > 0 &&
      !googString.contains(
          /** @type {!SanitizedCss} */ (sanitizedCss).getContent(), '{')) {
    throw new Error('Consider using packSanitizedCssToSafeStyleProto().');
  }

  const safeStyleSheet = styleSheetSafeByReview(
      sanitizedCss ?
          /** @type {!SanitizedCss} */ (sanitizedCss).getContent() :
          '',
      {justification: 'from Soy SanitizedCss object'});
  return styleSheetToProto(safeStyleSheet);
};


/**
 * Converts an HTML Sanitized Content object to a corresponding
 * Safe String Proto.
 * @param {!SanitizedHtml|string|!soy.IdomFunction|!Function}
 *     sanitizedHtml
 * @return {!SafeHtmlProto}
 */
exports.packSanitizedHtmlToProtoSoyRuntimeOnly = function(sanitizedHtml) {
  if (sanitizedHtml !== '' && !(sanitizedHtml instanceof SanitizedHtml)) {
    throw new Error(
        'expected SanitizedHtml, got ' + googDebug.runtimeType(sanitizedHtml));
  }
  const content = sanitizedHtml ?
      /** @type {!SanitizedHtml} */ (sanitizedHtml).getContent() :
      '';
  const safeHtml = htmlSafeByReview(
      content, {justification: 'from Soy SanitizedHtml object'});
  return htmlToProto(safeHtml);
};


/**
 * Converts a JS Sanitized Content object to a corresponding Safe Script Proto.
 * @param {!SanitizedJs|string} sanitizedJs
 * @return {!SafeScriptProto}
 */
exports.packSanitizedJsToProtoSoyRuntimeOnly = function(sanitizedJs) {
  if (sanitizedJs !== '' && !(sanitizedJs instanceof SanitizedJs)) {
    throw new Error(
        'expected SanitizedJs, got ' + googDebug.runtimeType(sanitizedJs));
  }
  const safeScript = scriptSafeByReview(
      sanitizedJs ? /** @type {!SanitizedJs} */ (sanitizedJs).getContent() : '',
      {justification: 'from Soy SanitizedJs object'});
  return scriptToProto(safeScript);
};


/**
 * Converts a Trusted Resource URI Sanitized Content object to a corresponding
 * Trusted Resource URL Proto.
 * @param {!SanitizedTrustedResourceUri|string}
 *     sanitizedTrustedResourceUri
 * @return {!TrustedResourceUrlProto}
 */
exports.packSanitizedTrustedResourceUriToProtoSoyRuntimeOnly = function(
    sanitizedTrustedResourceUri) {
  if (sanitizedTrustedResourceUri !== '' &&
      !(sanitizedTrustedResourceUri instanceof SanitizedTrustedResourceUri)) {
    throw new Error(
        'expected SanitizedTrustedResourceUri, got ' +
        googDebug.runtimeType(sanitizedTrustedResourceUri));
  }
  const trustedResourceUrl = resourceUrlSafeByReview(
      sanitizedTrustedResourceUri ?
          /** @type {!SanitizedTrustedResourceUri} */ (
              sanitizedTrustedResourceUri)
              .getContent() :
          '',
      {justification: 'from Soy SanitizedTrustedResourceUri object'});
  return resourceUrlToProto(trustedResourceUrl);
};


/**
 * Converts a URI Sanitized Content object to a corresponding Safe URL Proto.
 * @param {!SanitizedUri|string|!Uri} sanitizedUri
 * @return {!SafeUrlProto}
 */
exports.packSanitizedUriToProtoSoyRuntimeOnly = function(sanitizedUri) {
  if (sanitizedUri !== '' && !(sanitizedUri instanceof SanitizedUri) &&
      !(sanitizedUri instanceof Uri)) {
    throw new Error(
        'expected SanitizedUri, got ' + googDebug.runtimeType(sanitizedUri));
  }
  if (sanitizedUri instanceof Uri) {
    const safeUrlForUri = urlSafeByReview(
        sanitizedUri ?
            /** @type {!Uri} */ (sanitizedUri).toString() :
            '',
        {justification: 'from Soy Uri object'});
    return urlToProto(safeUrlForUri);
  }
  const safeUrl = urlSafeByReview(
      sanitizedUri ?
          /** @type {!SanitizedUri} */ (sanitizedUri).getContent() :
          '',
      {justification: 'from Soy SanitizedUri object'});
  return urlToProto(safeUrl);
};


/**
 * Converts a Safe String Proto to HTML Sanitized Content.
 * @param {?ReadonlySafeHtmlProto|undefined} x null or a safe string proto.
 * @return {?SanitizedHtml|undefined}
 */
exports.unpackProtoToSanitizedHtml = function(x) {
  if (x instanceof SafeHtmlProto) {
    let safeHtml = protoToHtml(x);
    safeHtml = safeHtml ? unwrapHtml(safeHtml).toString() : '';
    return soy.VERY_UNSAFE.ordainSanitizedHtml(safeHtml);
  }
  return x == null ? x : null;  // preserve undefined v. null
};


/**
 * Converts a Safe String Proto to CSS Sanitized Content.
 * @param {?ReadonlySafeStyleProto | ?ReadonlySafeStyleSheetProto | undefined} x
 *   null or a safe string proto.
 * @return {?SanitizedCss|undefined}
 */
exports.unpackProtoToSanitizedCss = function(x) {
  let safeCss;
  if (x instanceof SafeStyleProto) {
    safeCss = protoToStyle(x);
    safeCss = safeCss ? unwrapStyle(safeCss) : '';
    return soy.VERY_UNSAFE.ordainSanitizedCss(safeCss);
  } else if (x instanceof SafeStyleSheetProto) {
    safeCss = protoToStyleSheet(x);
    safeCss = safeCss ? unwrapStyleSheet(safeCss) : '';
    return soy.VERY_UNSAFE.ordainSanitizedCss(safeCss);
  }
  return x == null ? x : null;  // preserve undefined v. null
};


/**
 * Converts a Safe String Proto to JS Sanitized Content.
 * @param {?ReadonlySafeScriptProto | undefined} x null or a safe string proto.
 * @return {?SanitizedJs|undefined}
 */
exports.unpackProtoToSanitizedJs = function(x) {
  if (x instanceof SafeScriptProto) {
    let safeJs = protoToScript(x);
    safeJs = safeJs ? unwrapScript(safeJs).toString() : '';
    return soy.VERY_UNSAFE.ordainSanitizedJs(safeJs);
  }
  return x == null ? x : null;  // preserve undefined v. null
};


/**
 * Converts a Safe String Proto to URI Sanitized Content.
 * @param {?ReadonlySafeUrlProto | ?ReadonlyTrustedResourceUrlProto | undefined}
 *     x
 *   null or a safe string proto.
 * @return {?SanitizedUri|undefined}
 */
exports.unpackProtoToSanitizedUri = function(x) {
  if (x instanceof SafeUrlProto) {
    let safeUrl = protoToUrl(x);
    safeUrl = safeUrl ? unwrapUrl(safeUrl) : '';
    return soy.VERY_UNSAFE.ordainSanitizedUri(safeUrl);
  }
  return x == null ? x : null;  // preserve undefined v. null
};


/**
 * Converts a Safe String Proto to a Trusted Resource URI Sanitized Content.
 * @param {?ReadonlyTrustedResourceUrlProto | undefined} x
 *   null or a safe string proto.
 * @return {?SanitizedTrustedResourceUri|undefined}
 */
exports.unpackProtoToSanitizedTrustedResourceUri = function(x) {
  if (x instanceof TrustedResourceUrlProto) {
    let safeUrl = protoToResourceUrl(x);
    safeUrl = safeUrl ? unwrapResourceUrl(safeUrl).toString() : '';
    return soy.VERY_UNSAFE.ordainSanitizedTrustedResourceUri(safeUrl);
  }
  return x == null ? x : null;  // preserve undefined v. null
};

/**
 * Processes the return value of a proto bytes field so that it is consistently
 * formatted as base64 text.
 *
 * @return {?string|undefined}
 */
exports.unpackByteStringToBase64String = function(
    /** ?ByteString|undefined*/ bytes) {
  if (bytes == null) {
    return bytes;
  }
  if (bytes instanceof ByteString) {
    return bytes.asBase64();
  }
  throw new Error('unsupported bytes value: ' + bytes);
};

/**
 * Processes the return value of a proto bytes field so that it is consistently
 * formatted as base64 text.
 *
 * @return {!ByteString}
 */
exports.packBase64StringToByteString = function(/** string*/ bytes) {
  return ByteString.fromBase64(bytes);
};
