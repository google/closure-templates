// Copyright 2015 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

{namespace strict_test}

import {Foo} from 'src/test/protobuf/test.proto';

/** hello html */
{template helloHtml}
  {call hello /}
{/template}

/** hello js */
{template helloJs kind="js"}
  '{call hello /}'
{/template}

/** hello */
{template hello kind="text"}
  Hello world
{/template}

/** hello uri */
{template helloUri kind="uri"}
  https://helloworld.com
{/template}

/** hello trusted resource uri */
{template helloTrustedResourceUri kind="trusted_resource_uri"}
  /hello.world
{/template}

/** hello css */
{template helloCss kind="css"}
  {literal}.helloWorld {display: none}{/literal}
{/template}

/** hello attributes */
{template helloAttributes kind="attributes"}
  hello-world="true"
{/template}

/** a template with a param */
{template withParam}
  {@param p: string}

  Hello, {$p}
{/template}

{template withAsyncPluginCall}
  Hello, {testAsyncPlugin()}!
{/template}

/** a template with a param */
{template callsItself}
  {@param depth: int}
  {@param p: string}

  {if $depth == 0}
    {$p + 1}
  {else}
    {call callsItself data="all"}
      {param depth: $depth - 1 /}
    {/call}
  {/if}
{/template}

{template defaultParam}
  {@param p: int|null = 18}

  {$p}
{/template}

{template testExecutionOrder}
  {@param protoFuture: Foo}

  {let $boxedString kind="text"}
    {for $s in $protoFuture.getStringAList()}
      {$s}|
    {/for}
  {/let}

  {let $laterUse: $protoFuture.getBoolField() ? "these|are|strings|!!|" : "" /}

  // Both these values depend on $protoFuture. Since $boxedString is on the left, we assume it'll
  // get executed first, so generated detach code there. We assume $laterUse has already been
  // resolved since $boxedString is resolved, which means $protoFuture must already be resolved.
  // This tests those assumptions.
  {if $boxedString == $laterUse}
    it works!
  {/if}
{/template}

{template testEagerExecutionFailure}
  {@param proto: Foo}
  {@param counter: int}
  {if $counter === 0}
    Done!
  {elseif $proto != null}
    {call testEagerExecutionFailure}
      {param counter: $counter - 1 /}
      // This param is eagerly executed.
      {param proto: $proto.getMessageField()!.getFoo()! /}
    {/call}
  {else}
    Failed!
  {/if}
{/template}

{template testMultipleEagerExecutionFailures}
  {@param proto: Foo}
  {if $proto != null}
    // These lets are eagerly executed and will fail.
    {let $foo: $proto.getMessageField()!.getFoo() /}
    {let $foo2: $proto.getMessageField()!.getFoo() /}
    // The checkNotNull will fail, the other references to $foo and $foo2 are needed to prevent the
    // optimizer from reodering or inlining the lets.
    {checkNotNull($proto.getMessageField())
        && ($foo!.getSomeNumWithDefault() + $foo2!.getSomeNumWithDefault())}
    {$foo}{$foo2}
  {/if}
{/template}
