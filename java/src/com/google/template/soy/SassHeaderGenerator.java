/*
 * Copyright 2021 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.template.soy;

import com.google.template.soy.soytree.ImportNode.ImportType;
import com.google.template.soy.soytree.SoyFileNode;
import com.google.template.soy.soytree.SoyFileSetNode;
import java.util.ArrayList;
import java.util.List;

/**
 * Entry point for generating SASS header files corresponding to Soy files.
 *
 * <p>Important: Do not use outside of Soy code (treat as superpackage-private).
 */
public final class SassHeaderGenerator {

  public SassHeaderGenerator() {}

  /** Append import statements for the generated Sass header files for all dependencies */
  private static void addCodeToImportGeneratedHeaders(StringBuilder output, SoyFileNode soyFile) {
    output.append("\n");
    output.append("// Import the generated Sass header files for all dependencies\n");
    soyFile.getImports().stream()
        .filter(i -> i.getImportType() == ImportType.TEMPLATE)
        .map(i -> i.getSourceFilePath().path())
        .distinct()
        .sorted()
        .forEach(soyImport -> output.append("@import('").append(soyImport).append(".sass')\n"));
  }

  /** Append import statements for Css files specified in the Soy source */
  private static void addCodeToRequireCss(StringBuilder output, SoyFileNode soyFile) {
    output.append("\n");
    output.append("// Import the user-written CSS files required\n");
    soyFile.getRequireCss().stream()
        .distinct()
        .sorted()
        .forEach(
            sassImport ->
                output
                    .append(sassImport.endsWith(".sass") ? "@import('" : "@require('")
                    .append(sassImport)
                    .append("')\n"));
  }

  public List<String> genSassHeaders(SoyFileSetNode fileSetNode) {
    List<String> outputFiles = new ArrayList<>();
    for (SoyFileNode file : fileSetNode.getChildren()) {
      StringBuilder output = new StringBuilder();
      output
          .append("// This file was automatically generated by the Soy compiler.\n")
          .append("// Please don't edit this file by hand.\n")
          // This "source" comment makes Code Search link the gencode to the Soy source:
          .append("// source: ")
          .append(file.getFilePath().path())
          .append("\n");
      addCodeToImportGeneratedHeaders(output, file);
      addCodeToRequireCss(output, file);
      outputFiles.add(output.toString());
    }

    return outputFiles;
  }
}
